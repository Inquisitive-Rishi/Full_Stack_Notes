Analyzing performance of Objects and Arrays:


OBJECT:

Objects are unordered, and everything is stored in key:value pairs.

When to use objects?

- When we don't need order.
- When we need fast access/insertion/removal.

When we don't need any ordering, objects are an excellent choice.

Big O of objects:

- Insertion - O(1)
- Removal - O(1)
- Searching - O(N)  
- Access - O(1)


let user = {
    firstName: "Rishi",
    isStudent: true,
    favoriteNumbers: [1,2,4,6,7],
}

In the section 'Hash Maps' we'll learn how objects work behind the scenes and
how things are actually stored? 

What happens when we set firstName to "Rishi"?

In objects, as they are unordered, so there is no beginning nor end, 
so it doesn't matter where we insert the data into an object

Big O OF OBJECT METHODS.

1. OBject.keys - O(N)
2. OBject.values - O(N)
3. OBject.entries - O(N)
4. <obj-name>.hasOwnProperty - O(1)

eg.

Object.keys(user): // return array with keys of object.
output --> ['firstName', 'isStudent', 'favoriteNumbers'];

Object.values(user) // return array with values of object.
output --> ['Rishi',true,Array(5)];

Object.entries(user) // return array with both key and values.
output --> [Array(2),Array(2),Array(2)] 
            0. ['firstName',"Rishi"]......and so on.

user.hasOwnProperty('lastName'); // checks if property is there and returns boolean value.
output --> false.


ARRAYS:

When to use Arrays?

- When we need order.
- When we need fast access/insertion/removal.


Big O of Arrays:

Insertion - It depends....
Removal - It depends....
Searching - O(N)
Access - O(1)

Accessing elements using index is constant time.
Searching element is linear as it searches/iterates through every index.

When we insert or remove any element from start, index of all the remaining elements 
have to be shifted forward. (which is bad..)

It's better to remove/insert element from/to last of arrays as it do not involve shifting
of indexes of elements.


Big O of all array methods.

1. Array.push() - O(1)
2. Array.pop() - O(1)
3. Array.shift() - O(N)
4. Array.unshift() - O(N)
5. Array.slice() - O(N)
6. Array.concat() - O(N)
6. Array.splice() - O(N)
7. Array.sort() - O(n*logn)
8. forEach/map/filter/reduce etc.. - O(N)
