CSS is comprised of many layout algorithms aka 'layout modes'.

each layout modes are a sub-language on its own within CSS.

The default layout mode is the 'flow layout'.

Each layout algorithm is made to solve a specific problem.

the default 'flow layout' is meant to create:

digital documents (like MS Word), where headings and text appears vertically as blocks 
and things like text/links/images sit within these blocks.

So what problems does flexbox solve?

Flexbox is all about arranging a group of items in a row or column, and giving us 
an amazing amount of control over the distribution and alignment over these items.


But, we are talking about one layout mode called Flexbox.


Flexbox is not just a property but a toolbox of properties.

Some of these properties are for 'flex-containers' and some of them 
are for 'flex-items'

A flex container is any element that has the property of display:flex; on them.
flex-item lives inside flex container

FLEX SHORTHAND:

when we use:

.flex-container div {
    flex: 1;
}

this is a shorthand property for 'flex-items' 

flex declaration is actually a shorthand for 3 flex properties i.e flex-grow, flex-shrink, flex-basis.

so, when we use flex:1 it's a shorthand for:

flex-grow: 1 
flex-shrink: 1
flex-basis: 0 
in short, flex: 1 1 0;


FLEX GROW:

flex-grow expects single number as its value.
this number is used as flex-item's 'growth factor'.

HTML
<div class="flex-container">
  <div class="one"></div>
  <div class="two"></div>
  <div class="three"></div>
</div>

CSS
.flex-container div {
  background: peachpuff;
  border: 4px solid brown;
  width: 250px;
  height: 100px;
  flex: 1 1 0%;
}

this will make very div grow the same size

now

.flex-container .two {
  background: peachpuff;
  border: 4px solid brown;
  height: 100px;
  flex: 2 1 0%;
}

this will make the middle div (.two) to grow 2 times than the other two.

flex-shrink:
flex-shrink is same as flex-grow but it used as flex-item's 'shrink factor'

default behaviour of flex items is:
- when the container is big, the flex items will expand the fill it.
- when the container is smaller than the divs, flex items will shrink to fit in.
- flex items do not respect it's width, they adjust according to their container.


Flex Basis:

Flex basis sets the initial size of the flex items.
Flex basis tells the flex items to ignore 
- any width declaration (flex-direction: 'row')
- any height declaration (flex-direction: 'column')
So, any sort of flex-grow(ing) or flex-shrink(ing) stars from that baseline size.
default flex basis is 0%;

if we change flex-basis to auto, like: flex: 1 1 auto
this tells flex-items to check for a width declaration.

flex: auto --> flex: 1 1 auto;


BASIC FLEX VALUES:

1. flex: 'initial' --> flex: 0 1 auto;

this makes items inflexible even if there is a positive space.
But, allows to shrink its size if there is insufficient spacce.

sizes the items based on height/width.
Alignment abilities or 'auto margins' can be used to align flex items along main-axis.


2.flex: 'auto' --> flex: 1 1 auto;

this makes the flex items fully flexibile, so they can absorb any free space along main axis.
but sizes the items based on height/width property.

3.flex: 'none' --> flex: 0 0 auto;

This makes the flex items fully unflexible.
sizes items a/c height/width property.
cannot shrink in overflow situations too.

4.flex: <positive number> --> flex: <positive number> 1 0;

makes the items flexible and sets flex-basis to zero.


In summary: 


flex-grow: How much of the positive free space should the item get.

flex-shrink: how much of the negative free space should be removed from the item.

flex-basis: what is the size of the item before shrinking and growing happens.

flex-grow deals with adding available space.
flex-shrink takes away space to make boxes fit into their container without overflowing.


AXES:

In flexbox, everything is based on the primary axis, and the cross axis that 
runs perpendicularly to it.

In flexbox, we decide whether to run this primary axis vertically or horizontally


To control available space outside the items of the container, we use justify content 
To control available space within the items we may use flex properties (flex: 1 flex: auto etc);


MAX-CONTENT | MIN-CONTENT

when we apply min-content to a string of text, each word wraps and the width of the
string is equal to the largest word of that string.

when we apply max-content, no wrapping occurs and would overflow the container it was in
if it was too narrow.


POSITIVE FREE SPACE | NEGATIVE FREE SPACE

when the container is 500px, and we've 3 items of 100pxs each inside the container, 
we've got 200px of positive free space.

When the container is 500px, and the 3 items is of 200px each inside the container, 
we've got 100px of negative free space.

It is this distribution of positive free space, and the removal of negative free space
we need to understand to understand the flex properties.


Note: if we want flexbox to ignore the size of the items when doing space distribution, then
      set flex-basis to 0.
      This tells the flexbox that all the space is available for distribution and to share
      it out in proportion.


FLEX-SHRINK AND FLEX-BASIS:

flex-shrink is not similar to flex-grow when it comes to shrinking the items.
The items will not shrink to 0 and will be 'floored' to their min-content size.

i.e when shrinking an item with text in it, the item's text will wrap but will never 
become smaller than the min-content size.


ADDITIONAL NOTES:

By default, all flex items try to fit in one line.
default is flex-wrap: nowrap;
we can set it to flex-wrap: nowrap | wrap | wrap-reverse

flex-flow property is a shorthand for flex-direction and flex-wrap properties.

default value is : flex-flow: column nowrap;

eg: 

.container {
  flex-flow: column nowrap;
}

justify-contents have following properties:


To put the footer down:

body {
display: flex;
flex-direction: column;
min-height: 100vh;
}

set main content: middle part of the page

.content {
flex: 1;
}



