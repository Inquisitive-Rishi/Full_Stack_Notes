In older days, we used to manually download different libraries from their respective websites.

Whenever they update to new version, we need to dowwnload that version and link it to the HTML
file.

Starting around 2010, several 'Package Managers' emerged to solve this problem

by automating the process of downloading and upgrading libraries from central repositories.

eg:

Bower
npm
yarn

npm was originally meant to run on the backend with nodeJS, and not on the frontend.

But nowadays, we use npm on the frontend too.

this makes npm a wierd choice for a frontend JS package manager meant to run on the browser.

Using package mmanagers means you need to know command line.
being average in command line is important part of modern JS 

We don't need to download npm separately, as it comes with nodeJS, 
if we've nodeJS, we already have npm installed. 


Scenario:

We want a library called moment.js to be used in our project,

so instead of going to the moment.js website and downloading the package manually,

we can use npm to install the latest version automatically.

inside the project directory where index.html file exists.

npm -init -y --> this creates a new package.json file with all the default properties.

npm install moment --save  --> this does three things:

1. installs moment library which we can now use (after linking it to HTML file) in our project.
2. Saves the moment library config files inside node_modules folder.
3. Update the package.json file with the new dependency name.

like this :

{
  "name": "js_practice",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "moment": "^2.29.4"
  }
}

this file package.json is very useful later while sharing a project. 

Instead of sharing the node_modules folder (which can get very large),
we only share package.json file.
Other developers can download the necesssary dependencies using 'npm install' automatically.


Now, our work has become significantly easy with npm as we don't need to scavennge for 
various libraries and their latest version.


But, look at this:

<!DOCTYPE html>  
<html lang="en">  
<head>  
  <meta charset="UTF-8">  
  <title>JavaScript Example</title>  
  <script src="node_modules/moment/min/moment.min.js"></script>
  <script src="index.js"></script>  
</head>  
<body>  
  <h1>Hello from HTML!</h1>  
</body>  
</html>

we can see that now, we've to dig into the folder to find the config file 
inside node_modules folder.

which makes this process inconvenient.


JS MODULE BUNDLER (WEBPACK):

Most programming language provide a way to import code from one file to another.

JS wasn't originally designed with this feature.

JS was designed to only run on the browser with no access to the file system of the client's 
commputer. 

So, for a long time, 

Organizing JS code in multiple files required you to load each file with variables shared globally.

So, above with the moment example, the entire moment.min.js file is loaded in the HTML,

This defines a global variable 'moment', which is then available to any file loaded 
after moment.min.js.

To check this, load the webpage via HTML and on the console type windows.moment or 
just windows and we can see a variable 'moment' inside it.


commonJS:

In 2009, a project named commonJS was started with the goal of specifying an ecosystem for 
JavaScript outside the browser. 

A big part of commonJS was it's specifications for modules,

this finally allowed JS to export and import codes across files like most programming languages,
without resorting to global variables.

The most well-known implementation of CommonJS modules is NodeJS.


After NodeJS came into existence,

Instead of loading all of moment.min.js with an HTML script tag, we can load it directly in
the JS file as follows.

Example of nodeJS modules.

var moment = require('moment');

console.log("Hello from JS");
console.log(moment().startOf('day').fromNow());

So, basically, this is nodeJS which has access to computer's filesystems.

NodeJS also knows the location of each npm module path.

therefore, we don't specify the exact location like this:

require('./node_modules/moment/min/moment.min.js)

but like this:

require('moment') <-- pretty sweet!

This is all good for nodeJS, and if we copy paste this code in browser, 
it throws error of 'require not defined'

why?

Because, the browser doesn't have access to the file systems and 
require is an invalid JS syntax

This is where JS module bundler comes in. 

JS module bundler is a tool that gets us around the problem of build step to create
the final output that is browser compatible. (that do not need access the file systems.)

module bundler finds all 'require' statements and replace it with actual contents of each
required file.

The final result is the single bundled JS file with no 'require' statement.

The most popular module bundler is Webpack which was fueled by the popularity of React.

React takes full advantage of webpack various features.

Note: webpack itself is an npm package.