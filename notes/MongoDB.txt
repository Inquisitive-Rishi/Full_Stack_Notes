CHAPTER 1: INSERT AND FIND DOCUMENTS:

Lesson 1: Insert Documents in a collection:

Two methods --> insertOne() | insertMany() 

insertMany() accepts array of documents

if collection do not exist, it's created by a 'plural' name

if _id is not provided, it is automatically generated


Lessson 2: Finding documents in a collection:

- find() 
- it --> show more data
- $eq
- $in 

both are same:

db.zips.find({zips: { $eq: "bihar" }}) 
db.zips.find({zips: "bihar"}) 

- $in

db.zips.find({city: { $in: ["Mumbai", "Delhi"] }})


Lesson 3: Find documents by using comparison operator:

- $gt $lt $gte $lte

For sub-documents we use quotes: "items.price"

eg: db.sales.find({ "items.price": { $gt: 50 }})


Lesson 4 - Querying Array elements with $elemMatch:

- $elemMatch

normal find will search for both scalar value and array elements but elemMatch is specifically for arrays.

eg: db.account.find({
    products: "investmentStock"
})

this search all documents that are either product arrays or normal field 

eg: db.account.find({
    products: {
        $elemMatch: { $eq: "investmentStock" }
    }
})

using multiple query with elemMatch

db.account.find({
    products: {
        $elemMatch: { name: "laptop", price: { $gt: 800 }, quantity: { $lte: 3 } }
    }
})


Lesson 5 - Finidng documents by using logical operators:

$and $or

if $and is not provided, it's added implicitly 

eg:

both are same:

db.routes.find({
    $and: [{ "airline":"Southeastern Airlines" }, { "stops": { $gte: 3 } }]
})

or, 

db.routes.find({ "airline":"Southeastern Airlines" }, { "stops": { $gte: 3 } })


$or 

db.routes.find({
  $or: [{ dst_airport: "SEA" }, { src_airport: "SEA" }],
})

$and with multiple $or

db.routes.find({
  $and: [
    { $or: [{ dst_airport: "SEA" }, { src_airport: "SEA" }] },
    { $or: [{ "airline.name": "American Airlines" }, { airplane: 320 }] },
  ]
})



CHAPTER 2: CRUD: REPLACE AND DELETE DOCUMENTS:


Lesson 1: Replacing a document.

Scenario: Used to replace the missing data

replaceOne(<filter><replacement>)

db.colls.replaceOne({_id:wffdsf243244234fdf}, {title: "King of the Jungle"})

returns two output: --> filterdata, modifieddata


Lesson 2: Update document by using updateOne()

update methods are used with $set or $push

$set --> add new field and values to a document
         or, 
         replaces the value of a field with a specified value
         use upsert: true to create document if doesn't exist

$push --> appends the value to an array.
         if absent, $push adds the array field with the value as its element


$set:

In a collection of podcast do not contain 'subscribers' field.

db.podcasts.updateOne({id:lssdfr34324}, $set: { subscribers: 94454 })
this adds a new field to the document.

if a document do not exist, we use upsert with $set to insert if the document do not exist.

db.podcasts.updateOne({ id:lssdfr34324}, $set: { subscribers: 94454 }, { upsert: true })


$push:

db.podcasts.updateOne({ id:lssdfr34324 }, $push: { hosts: "Rishi Raj" } )

this appends the element "Rishi Raj" to the array field hosts inside the document with id:lssdfr34324


Lesson 3: Update documents by using findAndModify()

this method uses three properties:
1. query
2. update() <-- includes what we want to update
3. new: true <-- if we want to return the updated field

$inc  --> check and update the property

findAndModify() returns the document that's just been updated

Scenario --> create an app that tracks the no:of users who've downloaded the podcasts

we can use updateOne() to increment the download field by 1
then use findOne() the return the document using _id.

problem: this includes two round trip to the server 1. find 2. modify 

better solution: findAndModify()

eg:

db.podcast.findAndModify({
    query: { _id:sf243423hhl },
    update: { $inc: { download: 1 } },  <-- increase download of the document by 1.
    new: true  <-- returns the updated document
})


Lesson 4: update documents bby using updateMany()


note: updateMany() is not all-or-nothing operation:

if all data are not updated at once, we need to run this again.

not appropriate for some usecases, such as financial transaction.

updates all the documents that match a filter criteria.

eg:

db.books.updateMany(
    { publishDate: { $lt: 2022 } },
    { $set: { status: "LEGACY" } }
)

returns: matchCount and modifiedCount


Lesson 5: Deleting Documents:

- deleteOne() | deleteMany()

db.podcasts.deleteOne({_id: 242434sadfadsf})

delete document with id: 242434sadfadsf

db.podcasts.deleteMany({ category: "crime" })