TOPICS: - ... - MONGODB AGGREGATION -

db.accounts.find(products:
    {$elemMatch:
        {$eq:"CurrencyService"}
    }
)

Create a query that matches all documents with a transactions sub document that contains an amount less than or equal to $4500 and a transaction_code of "sell" in the transactions collection. (Forgot the command? Check the hint below!)

db.transactions.find({transactions:{$elemMatch:{amount:{lte:4500}, transaction_code: {$eq: "sell"}}}})

$AND $OR:

db.sales.find({$and:[{purchaseMethod:"Online"}, {couponUsed:true}, {"customer.age":{$lte:25}}]})

db.sales.find({$and:[{$or:[{"items.name":"pens"}]},{$or:[{"items.tags":{$elemMatch:{$eq:"writing"}}}]}]})

items.name:"pens"
items.tags:
    {$elemMatch:
        {$eq:"writing"}
    }

db.birds.replaceOne({\_id: ObjectId("6286809e2f3fa87b7d86dccd")},
    {
        "common_name": "Morning Dove",
        "scientific_name": "Zenaida macroura",
        "wingspan_cm": 37.23,
        "habitat": ["urban areas", "farms", "grassland"],
        "diet": ["seeds"],
    }
)

UPDATE DOCUMENT:

$SET

db.podcasts.updateOne(
    {
    _id: ObjectId("5e8f8f8f8f8f8f8f8f8f8f8"),
    },
    {
        $set: {
        subscribers: 98562,
            },
        }
    )

$set --> updates the existing element and replaces it with new element.

$UPSERT

db.podcasts.updateOne(
    { title: "The Developer Hub" },
    { $set: {topics: ["databases", "MongoDB"]}},
    { upsert: true }
)

$upsert --> add document if the document does not exist

$PUSH

db.podcasts.updateOne(
    { \_id: ObjectId("5e8f8f8f8f8f8f8f8f8f8f8") },
    { $push: { hosts: "Nic Raboy" } }
)

$push --> add element to array.

eg:

db.birds.updateOne({\_id: ObjectId("6268413c613e55b82d7065d2")}, {$set:{tags:["geese","herbivore","migration"]}})

bd.birds.findAndUpdate({
    query: {\_id: ObjectId("628682d92f3fa87b7d86dcce")},
    update: {$inc: {sightings_count: 1}},
    new: true,
})

updateMany()

db.books.updateMany(
    { publishedDate: { $lt: new Date("2019-01-01") } },
    { $set: { status: "LEGACY" } }
)

db.birds.updateMany(
    {common_name: {$in: ["Blue Jay", "Grackle"]}},
    {$set: {last_seen: new Date('2022-01-01')}}
)

SORT AND LIMIT:

cursor.sort()
cursor.limit()

cursor is data that comes before it

eg: data.sort().limit()

db.companies.find({category_code:"music"}).sort({name:1})

1 -> to sort in ascending order
-1 -> to sort in descending order

db.companies.find({category_name:"music"},{name:1}).sort(name:1).limit(3)

here {name:1} inside find() is 'projection'

that means it will display only name field

eg: db.companies.find({category_name:"music"},{name:1,number_of_employees:1}).sort(name:1).limit(3)

here, {name:1,number_of_employees:1} is 'projection'

the result will only show name and number_of_employees
projection returns only selected 'fields'

db.sales.find({ "items.name": { $in: ["laptop", "backpack", "printer paper"] }, "storeLocation": "London", }).sort({ saleDate: -1, }).limit(3)

Find the data on sales to customers less than 30 years old in which the customer satisfaction rating was greater than three. Return only the customer's age and satisfaction rating, the sale date and store location. Do not include the \_id field. (Forgot the command? Check the hint below!)

db.sales.find({ "customer.age": { $lt: 30 }, "customer.satisfaction": { $gt: 3 }}, { "customer.satisfaction": 1, "customer.age": 1, "storeLocation": 1, "saleDate": 1, "\_id": 0, });

Find data on all sales from the Seattle and New York stores. Return all data except the purchase method, customer information, and whether a coupon was used. (Forgot the command? Check the hint below!)

db.sales.find({storeLocation: {$in: ["Seattle","New York"]}}, {purchaseMethod:0,customer:0,couponused:0})

COUNT DOCUMENTS:

// Count number of trips over 120 minutes by subscribers
db.trips.countDocuments({ tripduration: { $gt: 120 }, usertype: "Subscriber" })

db.sales.countDocuments({storeLocation:"Denver"},{couponUsed:true})

Find the number of sales that included a laptop that cost less that $600.(Forgot the command? Check the hint below!)

db.sales.countDocuments({"items.name":"laptop"},{price: {$lt: 600}})

MONGODB AGGREGATION:

MONGODB aggregation framework is used to build multi-staged queries.

Three terms:

1. Aggregation --> analysis and summary of data.
2. Stage --> Aggregation operation performed on the data.
3. Aggregation Pipeline --> Series of stages, completed one at a time, in order.

In MongoDB, most of the time we chain multiple stages to create an 'aggregation pipeline'

A pipeline consists of multiple stages:

filtered --> sorted --> grouped --> transformed

A stage is a single operation on the data.

Different types of stages:

1. $match --> filters the data that matches criteria
2. $group --> group documents based on criteria
3. $sort --> puts the document in a specified order
   etc

syntax:

db.collection.aggregate([
    {
        $stage1: {
            { expression1 },
            { expression2 }...
        },
        $stage2: {
            { expression1 }...
        }
    }
])

MATCH AND GROUP STAGE IN AGGREGATION PIPELINE:

{
    $match: {
        "field_name": "value"
    }
}

{
    $group:
    {
        _id: <expression>, // Group key
        <field>: { <accumulator> : <expression> }
    }
}

eg:

db.zips.aggregate([
    {
        $match: {
        state: "CA"
    }
    },
    {
        $group: {
        _id: "$city",
        totalZips: { $count : { } }
        }
    }
])

You have a database called bird_data with a collection of sightings. We want to use this data to find out where we should go to see our favorite bird, Eastern Bluebirds. Weâ€™ll use the location coordinates (latitude and longitude) and the number of sightings in each location to identify the best places to view the Eastern Bluebirds.

{
    _id: ObjectId("62cf8eb2bb9cdbee29caab03"),
    species_common: 'Eastern Bluebird',
    species_scientific: 'Sialia sialis',
    date: ISODate("2022-01-18T23:55:40.000Z"),
    location: { type: 'Point', coordinates: [ 40, -74 ] }
}

You are now connected to an Atlas cluster and to the bird_data database. Use the sightings collection in this lab.

First, create an aggregation pipeline, which will contain two stages. (Forgot the method for aggregation? Check the hint below!)

Create a $match stage that filters for documents about our target bird with the species_common value, "Eastern Bluebird"

Create a $group stage that groups documents based on the latitude and longitude of the sighting, stored in the location.coordinates field.

Within the groups, create a field to show the $count of how many documents are in each group, called "number_of_sightings".

Run your aggregation pipeline, and find out where to look for Eastern Bluebirds!

Once you complete this lab, compare your answer to the correct answer in the Review and Solved Code section, then select Next.

db.zips.aggregate([
    {
        $match: {
        state: "CA"
        }
    },
    {
        $group: {
        _id: "$city",
        totalZips: { $count : { } }
        }
    }
])

eg:

db.sightings.aggregate([
    {
        $match: {
        species_common: "Eastern Bluebird"
        }
    },
    {
        $group: {
        _id: "$location.coordinates",
        number_of_sightings: { $count: { } }
        }
    }
])

SORT AND LIMIT:

db.zips.aggregate([
    {
        $sort: {
        pop: -1
        }
    },
    {
        $limit: 5
    }
])

db.sightings.aggregate([
    {
        $sort: {
        'location.coordinates.1': -1
    }
    }, {
        $limit: 4
    }
])

PROJECT, SET, COUNT

Note: Use project at last of the pipeline.

$project

{
$project: {
        state:1, 
        zip:1,
        population:"$pop",
        \_id:0
    }
}

$set

{
    $set: {
    place: {
    $concat:["$city",",","$state"]
},
    pop:10000
    }
}

$count

{
    $count: "total_zips"
}

db.sightings.aggregate([
    {
        $match: {
        date: {
        $gt: ISODate('2022-01-01T00:00:00.000Z'),
        $lt: ISODate('2023-01-01T00:00:00.000Z')
        },
        species_common: 'Eastern Bluebird'
        }
    }, {
        $count: 'bluebird_sightings_2022'
    }
])

$set is used to create or change values of new or existing fields.

$project can be used to create or change the value of fields, but it can also be used to specify which fields to show in the documents in the aggregation pipeline.

$OUT

Must be the last stage of aggregation pipeline:

Creates a new collection if it does not already exist

Writes the document into a new collection that are returned by an aggregation pipeline.

If collection exists, $out replaces the existing collection with new data

db.sightings.aggregate([
{
    $match: {
    date: {
        $gte: ISODate('2022-01-01T00:00:00.000Z'),
        $lt: ISODate('2023-01-01T00:00:00.000Z')
        }
    }
}, {
    $out: 'sightings_2022'
    }
])

So, it's the end of aggregation pipeline:

we've covered different stages like:

match --> group --> sort --> limit --> project --> set --> count --> out
