Rule for creating prototypal inheritance with example.


// Initialize Constructor Function

function Hero(name,level) {
    this.name = name
    this.level = level
}

function Warrior(name,level,weapon) {
    Hero.call(this,name,level)
    this.weapon = weapon
}

function Healer(name,level,spell) {
    Hero.call(this,name,level)
    this.spell = spell
}

// Link prototypes and add prototypes and methods.

Object.setPrototypeOf(Warrior.prototype, Hero.prototype);
Object.setPrototypeOf(Healer.prototype, Hero.prototype);

Warrior.prototype.attack = function() { 
    console.log(`${this.name} attacks with ${this.weapon}`)
};

Healer.prototype.heal = function() {
    console.log(`${this.name} casts ${this.spell}.`)
};

Hero.prototype.greet = function() {
    console.log(`${this.name} says hello!`)
}

// Initialize individual character instances.

const hero1 = new Warrior('Kratos',3,'Axe');
const hero2 = new Healer('Khajit',2,'cure');

// With this code weâ€™ve created our Hero constructor with the base properties,
// created two character constructors called Warrior and Healer from the original constructor,
// added methods to the prototypes and created individual character instances.

