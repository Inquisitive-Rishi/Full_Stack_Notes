Unlike JAVA or other programming language where 'this' is the 'instance' of the current
object in a class method.

'this' method cannot be used outside the method 
and this simple approach do not create a confusion.

In JS, situation is different:
'this' is the context of a function invocation (execution) 

JS has four function invocation types:

1. function invocation: parseInt("hi");
2. method invocation: console.log("HI");
3. constructor invocation: new Player("Rishi",24,"isCool")
4. indirect function: Hero.call(this,name,level)

Each invocation types defines the context on its own way,
So, 'this' behaves differently than the developer expects.

Moreover, strict mode also affects the execution context.   

The key to understanding 'this' keyword is having a clear view of function 
invocation and how it impacts the context.

This section explains function invocation, how the function invocation influences 'this'
and demonstrate the common pitfalls of identifying the value of 'this'.


TERMS TO FAMILIARIZE BEFORE FURTHER DISCUSSION:

- Invocation --> invocation of a function or execution of a function, both are same
                 eg: parseInt("15"); 

- Context --> Context of the an invocation is the value of 'this' within the function body.

- Scope --> Scope of a function is the value of variables and functions accessible within 
            that function body.


NOTE: The 'global object' is determined by the execution environment,
      Inside the browser, the global object is the 'window' object.
